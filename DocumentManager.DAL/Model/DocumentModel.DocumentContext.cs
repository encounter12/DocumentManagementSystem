//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 20.01.2021 11:57:10
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.Extensions.Configuration;

namespace DocumentManager.DAL.Model
{

    public partial class DocumentContext : DbContext
    {

        public DocumentContext() :
            base()
        {
            OnCreated();
        }

        public DocumentContext(DbContextOptions<DocumentContext> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UseSqlServer(GetConnectionString("DocumentManagerConnection"));
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        private static string GetConnectionString(string connectionStringName)
        {
            var configurationBuilder = new ConfigurationBuilder().AddJsonFile("appsettings.json", optional: true, reloadOnChange: false);
            var configuration = configurationBuilder.Build();
            return configuration.GetConnectionString(connectionStringName);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<DocumentApplication> DocumentApplications
        {
            get;
            set;
        }

        public virtual DbSet<Tenant> Tenants
        {
            get;
            set;
        }

        public virtual DbSet<Document> Documents
        {
            get;
            set;
        }

        public virtual DbSet<DocumentType> DocumentTypes
        {
            get;
            set;
        }

        public virtual DbSet<DocumentTypeGroup> DocumentTypeGroups
        {
            get;
            set;
        }

        public virtual DbSet<FileType> FileTypes
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            this.DocumentApplicationMapping(modelBuilder);
            this.CustomizeDocumentApplicationMapping(modelBuilder);

            this.TenantMapping(modelBuilder);
            this.CustomizeTenantMapping(modelBuilder);

            this.DocumentMapping(modelBuilder);
            this.CustomizeDocumentMapping(modelBuilder);

            this.DocumentTypeMapping(modelBuilder);
            this.CustomizeDocumentTypeMapping(modelBuilder);

            this.DocumentTypeGroupMapping(modelBuilder);
            this.CustomizeDocumentTypeGroupMapping(modelBuilder);

            this.FileTypeMapping(modelBuilder);
            this.CustomizeFileTypeMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region DocumentApplication Mapping

        private void DocumentApplicationMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<DocumentApplication>().ToTable(@"DocumentApplication", @"application");
            modelBuilder.Entity<DocumentApplication>().Property(x => x.DocumentID).HasColumnName(@"DocumentID").HasColumnType(@"bigint").IsRequired().ValueGeneratedNever().HasPrecision(19, 0);
            modelBuilder.Entity<DocumentApplication>().Property(x => x.ApplicationID).HasColumnName(@"ApplicationID").HasColumnType(@"bigint").IsRequired().ValueGeneratedNever().HasPrecision(19, 0);
            modelBuilder.Entity<DocumentApplication>().Property(x => x.ApplicationSigningTypeCode).HasColumnName(@"ApplicationSigningTypeCode").HasColumnType(@"varchar(15)").ValueGeneratedNever().HasMaxLength(15);
            modelBuilder.Entity<DocumentApplication>().Property(x => x.CanBeModified).HasColumnName(@"CanBeModified").HasColumnType(@"bit").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"0");
            modelBuilder.Entity<DocumentApplication>().Property(x => x.HasError).HasColumnName(@"HasError").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<DocumentApplication>().Property(x => x.ErrorComment).HasColumnName(@"ErrorComment").HasColumnType(@"varchar(2000)").ValueGeneratedNever().HasMaxLength(2000);
            modelBuilder.Entity<DocumentApplication>().Property(x => x.IsOriginalReceived).HasColumnName(@"IsOriginalReceived").HasColumnType(@"bit").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"0");
            modelBuilder.Entity<DocumentApplication>().Property(x => x.DateNotification).HasColumnName(@"DateNotification").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<DocumentApplication>().Property(x => x.IsFromClientPortal).HasColumnName(@"IsFromClientPortal").HasColumnType(@"bit").ValueGeneratedNever();
            modelBuilder.Entity<DocumentApplication>().HasKey(@"DocumentID");
        }

        partial void CustomizeDocumentApplicationMapping(ModelBuilder modelBuilder);

        #endregion

        #region Tenant Mapping

        private void TenantMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Tenant>().ToTable(@"Tenant", @"dbo");
            modelBuilder.Entity<Tenant>().Property(x => x.TenantID).HasColumnName(@"TenantID").HasColumnType(@"bigint").IsRequired().ValueGeneratedOnAdd().HasPrecision(19, 0);
            modelBuilder.Entity<Tenant>().Property(x => x.TenantName).HasColumnName(@"TenantName").HasColumnType(@"nvarchar(1000)").ValueGeneratedNever().HasMaxLength(1000);
            modelBuilder.Entity<Tenant>().HasKey(@"TenantID");
        }

        partial void CustomizeTenantMapping(ModelBuilder modelBuilder);

        #endregion

        #region Document Mapping

        private void DocumentMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Document>().ToTable(@"Document", @"document");
            modelBuilder.Entity<Document>().Property(x => x.DocumentID).HasColumnName(@"DocumentID").HasColumnType(@"bigint").IsRequired().ValueGeneratedOnAdd().HasPrecision(19, 0);
            modelBuilder.Entity<Document>().Property(x => x.FileName).HasColumnName(@"FileName").HasColumnType(@"varchar(1000)").ValueGeneratedNever().HasMaxLength(1000);
            modelBuilder.Entity<Document>().Property(x => x.DocumentTypeID).HasColumnName(@"DocumentTypeID").HasColumnType(@"bigint").IsRequired().ValueGeneratedNever().HasPrecision(19, 0);
            modelBuilder.Entity<Document>().Property(x => x.FileTypeCode).HasColumnName(@"FileTypeCode").HasColumnType(@"varchar(10)").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<Document>().Property(x => x.Comment).HasColumnName(@"Comment").HasColumnType(@"varchar(2000)").ValueGeneratedNever().HasMaxLength(2000);
            modelBuilder.Entity<Document>().Property(x => x.Guid).HasColumnName(@"Guid").HasColumnType(@"uniqueidentifier").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Document>().HasKey(@"DocumentID");
        }

        partial void CustomizeDocumentMapping(ModelBuilder modelBuilder);

        #endregion

        #region DocumentType Mapping

        private void DocumentTypeMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<DocumentType>().ToTable(@"DocumentType", @"document");
            modelBuilder.Entity<DocumentType>().Property(x => x.DocumentTypeID).HasColumnName(@"DocumentTypeID").HasColumnType(@"bigint").IsRequired().ValueGeneratedOnAdd().HasPrecision(19, 0);
            modelBuilder.Entity<DocumentType>().Property(x => x.Name).HasColumnName(@"Name").HasColumnType(@"varchar(1000)").IsRequired().ValueGeneratedNever().HasMaxLength(1000);
            modelBuilder.Entity<DocumentType>().Property(x => x.DisplayOrder).HasColumnName(@"DisplayOrder").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<DocumentType>().Property(x => x.Description).HasColumnName(@"Description").HasColumnType(@"varchar(2000)").ValueGeneratedNever().HasMaxLength(2000);
            modelBuilder.Entity<DocumentType>().Property(x => x.Code).HasColumnName(@"Code").HasColumnType(@"varchar(20)").ValueGeneratedNever().HasMaxLength(20);
            modelBuilder.Entity<DocumentType>().Property(x => x.DocumentTypeGroupCode).HasColumnName(@"DocumentTypeGroupCode").HasColumnType(@"varchar(10)").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<DocumentType>().Property(x => x.HasTemplate).HasColumnName(@"HasTemplate").HasColumnType(@"bit").ValueGeneratedNever();
            modelBuilder.Entity<DocumentType>().HasKey(@"DocumentTypeID");
        }

        partial void CustomizeDocumentTypeMapping(ModelBuilder modelBuilder);

        #endregion

        #region DocumentTypeGroup Mapping

        private void DocumentTypeGroupMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<DocumentTypeGroup>().ToTable(@"DocumentTypeGroup", @"document");
            modelBuilder.Entity<DocumentTypeGroup>().Property(x => x.DocumentTypeGroupCode).HasColumnName(@"DocumentTypeGroupCode").HasColumnType(@"varchar(10)").IsRequired().ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<DocumentTypeGroup>().Property(x => x.Name).HasColumnName(@"Name").HasColumnType(@"varchar(1000)").IsRequired().ValueGeneratedNever().HasMaxLength(1000);
            modelBuilder.Entity<DocumentTypeGroup>().HasKey(@"DocumentTypeGroupCode");
        }

        partial void CustomizeDocumentTypeGroupMapping(ModelBuilder modelBuilder);

        #endregion

        #region FileType Mapping

        private void FileTypeMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<FileType>().ToTable(@"FileType", @"document");
            modelBuilder.Entity<FileType>().Property(x => x.FileTypeCode).HasColumnName(@"FileTypeCode").HasColumnType(@"varchar(10)").IsRequired().ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<FileType>().Property(x => x.Name).HasColumnName(@"Name").HasColumnType(@"varchar(1000)").IsRequired().ValueGeneratedNever().HasMaxLength(1000);
            modelBuilder.Entity<FileType>().HasKey(@"FileTypeCode");
        }

        partial void CustomizeFileTypeMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<DocumentApplication>().HasOne(x => x.Document).WithOne(op => op.DocumentApplication).HasForeignKey(typeof(DocumentApplication), @"DocumentID").IsRequired(true);

            modelBuilder.Entity<Document>().HasOne(x => x.DocumentApplication).WithOne(op => op.Document).HasForeignKey(typeof(DocumentApplication), @"DocumentID").IsRequired(true);
            modelBuilder.Entity<Document>().HasOne(x => x.FileType).WithMany(op => op.Documents).HasForeignKey(@"FileTypeCode").IsRequired(false);
            modelBuilder.Entity<Document>().HasOne(x => x.DocumentType).WithMany(op => op.Documents).HasForeignKey(@"DocumentTypeID").IsRequired(true);

            modelBuilder.Entity<DocumentType>().HasMany(x => x.Documents).WithOne(op => op.DocumentType).HasForeignKey(@"DocumentTypeID").IsRequired(true);
            modelBuilder.Entity<DocumentType>().HasOne(x => x.DocumentTypeGroup).WithMany(op => op.DocumentTypes).HasForeignKey(@"DocumentTypeGroupCode").IsRequired(false);

            modelBuilder.Entity<DocumentTypeGroup>().HasMany(x => x.DocumentTypes).WithOne(op => op.DocumentTypeGroup).HasForeignKey(@"DocumentTypeGroupCode").IsRequired(false);

            modelBuilder.Entity<FileType>().HasMany(x => x.Documents).WithOne(op => op.FileType).HasForeignKey(@"FileTypeCode").IsRequired(false);
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
